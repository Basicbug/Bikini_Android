// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.5.21'
    ext.detekt_version = "1.0.1"
    repositories {
        google()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.38.1'
        classpath "com.android.tools.build:gradle:4.1.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
plugins {
    id("io.gitlab.arturbosch.detekt").version("1.0.1")
}
allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://devrepo.kakao.com/nexus/content/groups/public/'
        }
    }
}
subprojects {
    configurations {
        ktlint
    }

    dependencies {
        ktlint 'com.github.shyiko:ktlint:0.2.0'
    }

    // 스타일을 검사하는 태스크
    task ktlint(type: JavaExec) {
        main = 'com.github.shyiko.ktlint.Main'
        classpath = configurations.ktlint
        args 'src/**/*.kt'
    }

    // 스타일을 검사하고 맞지 않는 부분을 수정해주는 태스크
    task ktlintFormat(type: JavaExec) {
        main = 'com.github.shyiko.ktlint.Main'
        classpath = configurations.ktlint
        args '-F', 'src/**/*.kt'
    }

    // 'check' 태스크가 실행될 때 'ktlint' 태스크가 함께 수행되도록 합니다.
    afterEvaluate { project ->
        check.dependsOn ktlint
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}

task copyGitHooks(type: Copy) {
    from("${rootDir}/teamConfig/git/git-hooks/") {
        include '**/*'
        rename '(.*)', '$1'
    }
    into "${rootDir}/.git/hooks"
}

task installGitHooks(type: Exec) {
    group 'git hooks'
    workingDir rootDir
    commandLine 'chmod'
    args '-R', '+x', '.git/hooks/'
    dependsOn copyGitHooks
}