apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: '../libraries.gradle'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'dagger.hilt.android.plugin'

android {
    signingConfigs {
        release {
        }
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    def versionPropsFile = file('../version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        //
        // versionCode
        //
        def versionCodeNo = versionProps['VERSION_CODE'].toInteger()
        versionProps['VERSION_CODE'] = versionCodeNo.toString()

        //
        // versionName
        //
        def versionNameMajor = versionProps['VERSION_NAME_MAJOR'].toInteger()
        versionProps['VERSION_NAME_MAJOR'] = versionNameMajor.toString()

        def versionNameMinor = versionProps['VERSION_NAME_MINOR'].toInteger()
        versionProps['VERSION_NAME_MINOR'] = versionNameMinor.toString()

        def versionNamePatch = versionProps['VERSION_NAME_PATCH'].toInteger()
        versionProps['VERSION_NAME_PATCH'] = versionNamePatch.toString()

        defaultConfig {
            // Read the API key from
            def secureProps = new Properties()
            if (file('../secure.properties').exists()) {
                file('../secure.properties')?.withInputStream { secureProps.load(it) }
            }
            resValue "string", "maps_api_key", (secureProps.getProperty("MAPS_API_KEY") ?: "")

            applicationId "com.example.bikini_android"
            minSdkVersion 27
            targetSdkVersion 30
            versionCode = versionCodeNo
            versionName = versionNameMajor + "." + versionNameMinor + "," + versionNamePatch
            multiDexEnabled true
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }


    } else {
        throw new GradleException("Could not read version.properties!")
    }
    signingConfigs {
        releaseWithSignedKey {
            storeFile file(SIGNED_STORE_FILE)
            storePassword SIGNED_STORE_PASSWORD
            keyAlias SIGNED_KEY_ALIAS
            keyPassword SIGNED_KEY_PASSWORD
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
        debug {
            java.srcDirs = ['src/debug/java']
            res.srcDirs = ['src/debug/res']
        }
        release {
            java.srcDirs = ['src/release/java']
            res.srcDirs = ['src/release/res']
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.releaseWithSignedKey

        }
        debug {
            minifyEnabled false
            shrinkResources false
            applicationIdSuffix ".debug"
            debuggable true

        }
    }

    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {
    testImplementation core_test_libraries.values()
    androidTestImplementation android_core_test_libraries.values()

    implementation android_core_libraries.values()

    implementation database_libraries.values()
    kapt database_annotion.values()

    implementation image_libraries.values()
    kapt image_annotation_processor.values()

    implementation network_libraries.values()

    implementation debugger_libraries.values()

    implementation design_libraries.values()

    implementation rx_java_libraries.values()

    implementation lifecycle_libraries.values()

    implementation map_libraries.values()

    implementation login_libraries.values()

    debugImplementation leakcanary_libraries.values()
    debugImplementation flipper_libraries_debug.values()

    implementation flipper_libraries.values()

    implementation hilt_libraries.values()
    kapt hilt_annotion.values()
}